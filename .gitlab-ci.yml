stages:
  - pull
  - build
  - lint
  - test
  - push
  - cleanup
  - deploy

before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"

pull:
  stage: pull
  script:
    - docker pull "$CI_REGISTRY_IMAGE":latest
  allow_failure: true

build:
  stage: build
  script:
    - docker build --tag="$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" --cache-from="$CI_REGISTRY_IMAGE":latest .

lint:
  stage: lint
  script:
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose-test.yml run app flake8 .

test:
  stage: test
  script:
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose-test.yml run app python manage.py test

push image:
  stage: push
  only:
    - master
    - tags
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":"$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_REF_NAME"

push latest:
  stage: push
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":latest
    - docker push "$CI_REGISTRY_IMAGE":latest

cleanup:
  stage: cleanup
  when: always
  script:
    - docker rmi -f "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME"
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose-test.yml down --remove-orphans

deploy:
  stage: deploy
  when: manual
  script:
    - export CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
    - docker-compose -f docker-compose.prod.yml pull
    - docker-compose -f docker-compose.prod.yml down
    - docker-compose -f docker-compose.prod.yml up -d